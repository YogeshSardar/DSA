#include <iostream>
using namespace std;

void Merge(int *arr, int s, int e)
{
    int mid = s + (e - s) / 2;
    int len1 = mid - s + 1;
    int len2 = e - mid;

    int *arr1 = new int[len1];
    int *arr2 = new int[len2];
    int k = s;
    for (int i = 0; i < len1; i++)
    {
        arr1[i] = arr[k++];
    }
    k = mid + 1;
    for (int i = 0; i < len2; i++)
    {
        arr2[i] = arr[k++];
    }

    // merge to sort array   
    
    int i = 0;
    int j = 0;
    k = s;

    while (i < len1 && j < len2)
    {
        if (arr1[i] < arr2[j])
        {
            arr[k++] = arr1[i++];
        }
        else
        {
            arr[k++] = arr2[j++];
        }
    }
    
    
    
    // copy the remaining element
    while (i< len1)
    {
        arr[k++] = arr1[i++];
    }
    while (j < len2)
    {
        arr[k++] = arr2[j++];
    }
    // delet the dynamic memory allocation

    delete[] arr1;
    delete[] arr2;
}

void mergeSort(int arr[], int s, int e)
{
    // base case
    if (s >= e)
        return;

    int mid = s + (e - s) / 2;
    mergeSort(arr, s, mid);
    mergeSort(arr, mid + 1, e);

    Merge(arr, s, e);
}

int main()
{
    int n = 7;
    int arr[7] = {1, 43, 22, 114, 5, 33, 8};
    mergeSort(arr, 0, n - 1);

    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
