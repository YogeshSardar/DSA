class Solution 
{
public:
    bool isPossible(int arr[], int N, int M, int mid)
    {
        int studentCount = 1;
        int pagesum = 0;
        
        for (int i = 0; i < N; i++)
        {
            
            if (pagesum + arr[i] <= mid)
            {
                pagesum += arr[i];
            }
            else
            {
                studentCount++;
                
                if (studentCount > M || arr[i] > mid)
                {
                    return false;
                }
                
                pagesum = arr[i];
            }
        }
        return true;
    }

    // Function to find minimum number of pages.
    int findPages(int arr[], int N, int M) 
    {
        int s = 0;
        int sum = 0;
        
        for (int i = 0; i < N; i++)
        {
            sum += arr[i];
        }
        int e = sum;
        int ans = -1;
        
        while (s <= e)
        {
            int mid = s + (e - s) / 2;
            
            if (isPossible(arr, N, M, mid))
            {
                ans = mid;
                e = mid - 1;
            }
            else
            {
                s = mid + 1;
            }
        }
        
        // If it's not possible to allocate pages, return -1.
        if (ans == -1)
            return -1;
        
        return ans;
    }
};
