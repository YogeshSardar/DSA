
vector<long long> printFirstNegativeInteger(long long int A[],long long int N, long long int K) {
    
    
    // create doblyended queue
    deque<long long int>dq;
    vector<long long >ans;
    
    
    // process 1st window of k size
    
    for(int i=0;i<K;i++)
    {
        if (A[i]<0)
        {
            dq.push_back(i);
        }
    }
    
    // store ans of  1st k size window
    
    if (dq.size()>0)
    {
        ans.push_back(A[dq.front()]);
    }
    else
    {
    ans.push_back(0);
    
    }
    
    // process for remaining window
    
    for (int i=K;i<N;i++)
{
    // removal
    if ( !dq.empty() && i-dq.front()>=K)    //cheking dq is empty and setting the other k window  
    {
        dq.pop_front();
        
    }
    // element addition current wala
    if (A[i]<0)
    {
        dq.push_back(i);
    }
    
    if (dq.size()>0)
    {
        ans.push_back(A[dq.front()]);
    }
    else
    {
    ans.push_back(0);
    
    }
}
return ans;
 }
 
